@page "/products"
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal


<style>
    .recently-updated {
        background-color: #b5b3b3 
    }
</style>

<h3>Products</h3>
<div class="mb-3 mt-5 d-flex">
    <button class="btn btn-primary me-1" @onclick="CreateNewProduct"><i class="oi oi-plus text-white oi-3x"></i></button>
    <button class="btn btn-danger mx-1" @onclick="DeleteSelectedProducts" disabled="@(selectedProducts.Count == 0)"><i class="oi oi-trash text-white oi-3x"></i></button>
    <button class="btn btn-success mx-1" @onclick="EditSelectedProduct" disabled="@((selectedProducts == null) || (selectedProducts.Count != 1))"><i class="oi oi-pencil text-white oi-3x"></i></button>

    <div class="d-flex ms-auto col-md-3">
        <div class="input-group position-relative ms-3 d-flex align-items-center">
       
            <div class="input-group-prepend">
            
                <span class="input-group-text bg-transparent border-0">
                    <i class="oi oi-magnifying-glass text-muted oi-3x"></i>
                </span>
            </div>

            <input class="form-control pl-4 focus-highlight" type="search" @bind="searchTerm" placeholder="Search" aria-label="Search" @bind:event="oninput" @onkeyup="async () => await SearchProducts()">

         
           
        </div>
    </div>

  
</div>






    @if (ProductService.PagedProducts != null)
    {
        <table class="table table-striped table-hover">
            <thead>
            <tr>
                    <th>
                    <input type="checkbox" @bind="selectAllChecked" @onclick="ToggleSelectAll" />
                    </th>
                   
                    <th>Product Code</th>
                    <th>Items</th>
                    <th>Price</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var product in ProductService.PagedProducts.Items)
            {
                <tr class="@((ProductService.GetRecentlyUpdatedProductIds().Contains(product.ProdCode)) ? "recently-updated" : "")">
                    <td>
                        <input type="checkbox" checked="@(selectedProducts != null && selectedProducts.Contains(product.ProdCode))" @onchange="@((args) => ToggleSelected(args, product.ProdCode))" />
                    </td>
                    <td>@product.ProdCode</td>
                    <td>@product.Name</td>
                    <td>@(FormatCurrency(product.Price))</td>
                </tr>

              
            }
            </tbody>
        </table>

        <nav aria-label="...">
            <ul class="pagination">
                <li class="page-item @(ProductService.PagedProducts.CurrentPage == 1 ? "disabled" : "")">
                    <a class="page-link" @onclick="(() => LoadProducts(ProductService.PagedProducts.CurrentPage - 1))">Previous</a>
                </li>

                @for (int i = 1; i <= ProductService.PagedProducts.TotalPages; i++)
                {
                    int j = i;
                    <li class="page-item @(i == ProductService.PagedProducts.CurrentPage ? "active" : "")">
                        <a class="page-link" @onclick="(() => LoadProducts(j))">@i</a>
                    </li>
                }

                <li class="page-item @(ProductService.PagedProducts.CurrentPage == ProductService.PagedProducts.TotalPages ? "disabled" : "")">
                    <a class="page-link" @onclick="(() => LoadProducts(ProductService.PagedProducts.CurrentPage + 1))">Next</a>
                </li>
            </ul>
        </nav>

    }
    else
    {
        <p>Loading...</p>
    }




@code {
    private List<string> selectedProducts = new List<string>();
    private bool selectAllChecked;
    int? selectedProductId;
    private string searchTerm = string.Empty;
    



    protected override async Task OnInitializedAsync()
    {
        await ProductService.GetProducts();
        await LoadProducts();
    }

    private async Task LoadProducts(int page = 1, int pageSize = 10)
    {
        try
        {
            var previousUpdatedProductIds = ProductService.GetRecentlyUpdatedProductIds();

            await ProductService.GetProducts(page, pageSize, searchTerm);

            Console.WriteLine("Recently Updated Product IDs: " + string.Join(", ", previousUpdatedProductIds));

            var newUpdatedProductIds = ProductService.GetRecentlyUpdatedProductIds().Except(previousUpdatedProductIds).ToList();
            if (newUpdatedProductIds.Any())
            {
            
                await Task.Delay(500);

              
                ProductService.ClearRecentlyUpdatedProductIds();
            }
            Console.WriteLine("Recently Updated Product IDs: " + string.Join(", ", ProductService.GetRecentlyUpdatedProductIds()));

            
                StateHasChanged();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception during LoadProducts: {ex.Message}");
            // Handle the exception as needed
        }
    
    }

    private async Task SearchProducts()
    {
        await LoadProducts();
    }

    string FormatCurrency(decimal value)
    {
        return $"₱{value.ToString("N2")}";
    }


    void EditSelectedProduct()
    {
        if (selectedProducts.Any())
        {
         
               
                    foreach (var productId in selectedProducts)
                    {
                        NavigationManager.NavigateTo($"product/{productId}");
                    }
                
        
        }
        else
        {
         
        }
    }

    void CreateNewProduct()
    {
        _ = Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "Do you want to create a new product?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
            }).ContinueWith(result =>
        {
            if (result.Result.IsConfirmed)
            {
                NavigationManager.NavigateTo("/product");
            }
        });
    }

    async void DeleteSelectedProducts()
    {
        if (selectedProducts.Any())
        {
            var result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Are you sure?",
                    Text = "This action cannot be undone. Are you sure you want to delete the selected products?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonColor = "#d33",
                    ConfirmButtonText = "Yes, delete it!",
                    CancelButtonText = "No, cancel!",
                });

            if (result.IsConfirmed)
            {
                foreach (var productId in selectedProducts.ToList())
                {
                   
                    await ProductService.DeleteProduct(productId);
                }

                selectedProducts.Clear();

              
                await LoadProducts();
                StateHasChanged();

             
                await Swal.FireAsync("Deleted!", "The selected products have been deleted.", SweetAlertIcon.Success);
            }
            else
            {
               
            }
        }
        else
        {
           
        }
    }


    private void ToggleSelected(ChangeEventArgs args, string ProdCode)
    {
        if (args.Value is bool isChecked)
        {
            if (ProdCode == "-1")
            {
         
                selectedProducts = isChecked ? ProductService.PagedProducts.Items.Select(p => p.ProdCode).ToList() : new List<string>();
            }
            else
            {
       
                if (isChecked && !selectedProducts.Contains(ProdCode))
                {
                    selectedProducts.Add(ProdCode);
                }
                else if (!isChecked && selectedProducts.Contains(ProdCode))
                {
                    selectedProducts.Remove(ProdCode);
                }
            }
        }
    }

    private void ToggleSelectAll()
    {
        selectAllChecked = !selectAllChecked;

        if (selectAllChecked)
        {
            selectedProducts = ProductService.PagedProducts.Items.Select(p => p.ProdCode).ToList();
        }
        else
        {
            selectedProducts.Clear();
        }
    }

   

    

    
}
