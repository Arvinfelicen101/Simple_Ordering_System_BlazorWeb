@page "/customer"
@page "/customer/{CustCode}"
@inject ICustomerService CustomerService
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal




@if (CustCode is null)
{
    <PageTitle> Add Customer </PageTitle>
    <h3 class="mb-4"> Add Customer </h3>
}

else
{
    <PageTitle> Edit Customer </PageTitle>
    <h3 class="mb-4"> Edit Customer </h3>
}

<EditForm Model="customer" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator />

    <div class="row">
        <div class="col-md-4">
            
            <div class="mb-3">
                <label for="custcode" class="form-label">Customer Code</label>
                <InputText id="custcode" @bind-Value="customer.CustCode" class="form-control" disabled="@(CustCode is not null)" />
                <ValidationMessage For="@(() => customer.CustCode)" />
            </div>

            <div class="mb-3">
                <label for="fname" class="form-label">First Name</label>
                <InputText id="fname" @bind-Value="customer.Fname" class="form-control" />
                <ValidationMessage For="@(() => customer.Fname)" />
            </div>
        </div>

        <div class="col-md-4">
            <div class="mb-3">
                <label for="mname" class="form-label">Middle Name</label>
                <InputText id="mname" @bind-Value="customer.Mname" class="form-control" />
                <ValidationMessage For="@(() => customer.Mname)" />
            </div>

            <div class="mb-3">
                <label for="lname" class="form-label">Last Name</label>
                <InputText id="lname" @bind-Value="customer.Lname" class="form-control" />
                <ValidationMessage For="@(() => customer.Lname)" />
            </div>
        </div>

        <div class="col-md-4">
            <div class="mb-3">
                <label for="billaddress" class="form-label">Billing Address</label>
                <InputText id="billaddress" @bind-Value="customer.BillAddress" class="form-control" />
                <ValidationMessage For="@(() => customer.BillAddress)" />
            </div>

            <div class="mb-3">
                <label for="shipaddress" class="form-label">Shipping Address</label>
                <InputText id="shipaddress" @bind-Value="customer.ShipAddress" class="form-control" />
                <ValidationMessage For="@(() => customer.ShipAddress)" />
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <label for="email">Email Address</label>
            <InputText id="email" @bind-Value="customer.Email" class="form-control" />
            <ValidationMessage For="@(() => customer.Email)" />
        </div>

        <div class="col-md-4">
            <label for="mobilenum">Mobile Number</label>
            <InputText id="mobilenum" @bind-Value="customer.MobileNum" class="form-control" />
            <ValidationMessage For="@(() => customer.MobileNum)" />
        </div>

        <div class="col-md-4">
            <label for="homenum">Home Number</label>
            <InputText id="homenum" @bind-Value="customer.HomeNum" class="form-control" />
            <ValidationMessage For="@(() => customer.HomeNum)" />
        </div>
    </div>

    <br/>
    <button type="submit" class="btn btn-primary">@btnText</button>
</EditForm>

@code {
    [Parameter]
    public string? CustCode { get; set; }

    string btnText = string.Empty;

    OrderingSystem.Shared.Customer customer = new OrderingSystem.Shared.Customer();

    protected override void OnInitialized()
    {
        btnText = CustCode == null ? "Save New Customer" : "Save Customer";
    }


    protected override async Task OnParametersSetAsync()
    {
        if (CustCode is not null)
        {
            var result = await CustomerService.GetCustomerById(CustCode);
            if (result is not null)
                customer = result;
            else
                NavigationManager.NavigateTo("customer");
        }
    }

    async Task HandleSubmit()
    {
        if (!string.IsNullOrEmpty(CustCode))
        {
            var result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Are you sure?",
                    Text = "Do you want to update the product?",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                });

            if (result.IsConfirmed)
            {
                await CustomerService.UpdateCustomer(CustCode, customer);
                await Swal.FireAsync("Success!", "Product updated successfully.", SweetAlertIcon.Success);
            }

           

        }
        else
        {
            var result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Are you sure?",
                    Text = "Do you want to create the new product?",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                });

            if (result.IsConfirmed)
            {
                await CustomerService.CreateCustomer(customer);
                await Swal.FireAsync("Success!", "Product created successfully.", SweetAlertIcon.Success);
            }

        }
    }
}
