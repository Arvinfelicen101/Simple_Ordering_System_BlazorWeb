@page "/orders"

@inject ICustomerService CustomerService

<div class="container bg-secondary p-5 rounded-3 text-white shadow mt-3">
    <button class="btn btn-primary mb-3" @onclick="ShowCustomerModal"><i class="oi oi-eye text-white oi-3x"></i></button>

       <EditForm Model="Order" >
          <div class="row">
       <div class="col-md-3">

           <div class="mb-3">
               <label for="custcode" class="form-label">Customer Code</label>
                   <InputText id="custcode" @bind-Value="Order.CustomerCustCode" class="form-control" readonly />
           </div>
       </div

        <div class="col-md-3">

           <div class="mb-3">
               <label for="custcode" class="form-label">Full Name</label>
                   <InputText id="custcode" @bind-Value="Order.CustomerCustCode" class="form-control" readonly />
           </div>
       </div

        <div class="col-md-3">

           <div class="mb-3">
               <label for="custcode" class="form-label">Bill To</label>
                   <InputText id="custcode" @bind-Value="Order.CustomerCustCode" class="form-control" readonly />
           </div>
       </div


        <div class="col-md-3">

           <div class="mb-3">
               <label for="custcode" class="form-label">Order No.</label>
                   <InputText id="custcode" @bind-Value="Order.CustomerCustCode" class="form-control" readonly />
           </div>
       </div
       

        <div class="col-md-3">

           <div class="mb-3">
               <label for="custcode" class="form-label">Address</label>
                   <InputText id="custcode" @bind-Value="Order.CustomerCustCode" class="form-control" readonly />
           </div>
       </div

       <div class="col-md-3">

          
       </div

       <div class="col-md-3">

           <div class="mb-3">
               <label for="custcode" class="form-label">Ship To</label>
                   <InputText id="custcode" @bind-Value="Order.CustomerCustCode" class="form-control" readonly />
           </div>
       </div

       

        <div class="col-md-3">

           <div class="mb-3">
               <label for="custcode" class="form-label">Order Date</label>
                   <InputText id="custcode" @bind-Value="Order.CustomerCustCode" class="form-control" readonly />
           </div>
       </div
          
           </div>
     </EditForm>

    <div class="modal" tabindex="-1" role="dialog" aria-labelledby="customerModalLabel" style="@(isCustomerModalOpen ? "display: block;" : "display: none;")">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-black" id="customerModalLabel">Select Customer</h5>
                    <button type="button" class="close" @onclick="CloseCustomerModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="d-flex ms-auto col-md-3">
                        <div class="input-group position-relative ms-3 d-flex align-items-center">
                            <!-- Search input group -->
                            <div class="input-group-prepend">
                                <!-- Search icon -->
                                <span class="input-group-text bg-transparent border-0">
                                    <i class="oi oi-magnifying-glass text-muted oi-3x"></i>
                                </span>
                            </div>

                            <!-- Search input -->
                            <input class="form-control pl-4 focus-highlight" type="search" @bind="searchTerm" placeholder="Search" aria-label="Search" @bind:event="oninput" @onkeyup="async () => await SearchCustomers()">

                            <!-- Additional span with border on the right -->

                        </div>
                    </div>


                </div>




                @if (CustomerService.PagedCustomers != null)
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover ">
                            <thead>
                                <tr>
                                    <th class="text-nowrap">
                                        <input type="checkbox" @bind="selectAllChecked" @onclick="ToggleSelectAll" />
                                    </th>
                                    <th class="text-nowrap">Customer Code</th>
                                    <th class="text-nowrap">First Name</th>
                                    <th class="text-nowrap">Middle Name</th>
                                    <th class="text-nowrap">Last Name</th>
                                    <th class="text-nowrap">Billing Address</th>
                                    <th class="text-nowrap">Shipping Address</th>
                                    <th class="text-nowrap">Email</th>
                                    <th class="text-nowrap">Mobile Number</th>
                                    <th class="text-nowrap">Home Number</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var customer in CustomerService.PagedCustomers.Items)
                                {
                                    <tr class="@((CustomerService.GetRecentlyUpdatedCustomerIds().Contains(customer.CustCode)) ? "recently-updated" : "")">
                                        <td>
                                            <input type="checkbox" checked="@(selectedCustomers != null && selectedCustomers.Contains(customer.CustCode))" @onchange="@((args) => ToggleSelected(args, customer.CustCode))" />
                                        </td>
                                        <td>@customer.CustCode</td>
                                        <td>@customer.Fname</td>
                                        <td>@customer.Mname</td>
                                        <td>@customer.Lname</td>
                                        <td>@customer.BillAddress</td>
                                        <td>@customer.ShipAddress</td>
                                        <td>@customer.Email</td>
                                        <td>@customer.MobileNum</td>
                                        <td>@customer.HomeNum</td>

                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <nav aria-label="...">
                        <ul class="pagination mt-3">
                            <li class="page-item @(CustomerService.PagedCustomers.CurrentPage == 1 ? "disabled" : "")">
                                <a class="page-link" @onclick="(() => LoadCustomers(CustomerService.PagedCustomers.CurrentPage - 1))">Previous</a>
                            </li>

                            @for (int i = 1; i <= CustomerService.PagedCustomers.TotalPages; i++)
                            {
                                int j = i;
                                <li class="page-item @(i == CustomerService.PagedCustomers.CurrentPage ? "active" : "")">
                                    <a class="page-link" @onclick="(() => LoadCustomers(j))">@i</a>
                                </li>
                            }

                            <li class="page-item @(CustomerService.PagedCustomers.CurrentPage == CustomerService.PagedCustomers.TotalPages ? "disabled" : "")">
                                <a class="page-link" @onclick="(() => LoadCustomers(CustomerService.PagedCustomers.CurrentPage + 1))">Next</a>
                            </li>
                        </ul>
                    </nav>

                }
                <div class="modal-footer d-flex justify-content-end">
                    <button type="button" class="btn btn-secondary" @onclick="CloseCustomerModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SelectCustomer">Select</button>
                </div>
                </div>
               
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show" style="@(isCustomerModalOpen ? "display: block;" : "display: none; opacity: 0.5;")"></div>


@code {
    private bool isCustomerModalOpen = false;
    private List<string> selectedCustomers = new List<string>();
    private bool selectAllChecked;
    private string searchTerm = string.Empty;
    public OrderingSystem.Shared.Order Order { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        await CustomerService.GetCustomers();
        await LoadCustomers();

    }

    private async Task LoadCustomers(int page = 1, int pageSize = 10)
    {
        await CustomerService.GetCustomers(page, pageSize, searchTerm);
    }

   
    private void ShowCustomerModal()
    {
        isCustomerModalOpen = true;
    }

    private void CloseCustomerModal()
    {
        isCustomerModalOpen = false;
    }

    private async Task SelectCustomer()
    {
         



        CloseCustomerModal();
    }
    
    private async Task SearchCustomers()
    {
        await LoadCustomers();
    }

    private string GetFullName()
    {
        return $"{Order?.Customer.Fname} {Order?.Customer.Lname}";
    }

    private void ToggleSelected(ChangeEventArgs args, String custCode)
    {
        if (args.Value is bool isChecked)
        {
            if (custCode == "-1")
            {
                selectedCustomers = isChecked ? CustomerService.PagedCustomers.Items.Select(p => p.CustCode).ToList() : new List<String>();
            }
            else
            {
                if (isChecked && !selectedCustomers.Contains(custCode))
                {
                    selectedCustomers.Add(custCode);
                }
                else if (!isChecked && selectedCustomers.Contains(custCode))
                {
                    selectedCustomers.Remove(custCode);
                }
            }
        }
    }

    private void ToggleSelectAll()
    {
        selectAllChecked = !selectAllChecked;

        if (selectAllChecked)
        {
            selectedCustomers = CustomerService.PagedCustomers.Items.Select(p => p.CustCode).ToList();
        }
        else
        {
            selectedCustomers.Clear();
        }
    }

}
