@page "/orders"

@inject ICustomerService CustomerService
@inject IProductService ProductService
@inject IOrderService OrderService
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal
@using OrderingSystem.Shared
@using OrderingSystem.Shared.ViewModels;

<div class="container bg-secondary p-5 rounded-3 text-white shadow mt-3 mb-5">
   
    <div class="d-flex justify-content-between">
        <div>
        <button class="btn btn-primary mb-3" @onclick="@ResetState"><i class="oi oi-plus text-white oi-3x"></i></button>
       
        </div>
        <div class="d-flex align-items-center">
            <div class="d-flex">
               
                <div>
                    <input class="form-control pl-4 mx-2 focus-highlight" type="search" @bind="searchOrderNo" placeholder="Search Order No." aria-label="Search">
                </div>
               
            <div>
                <button class="btn btn-primary mx-3" @onclick="SearchOrder"><i class="oi oi-magnifying-glass text-white oi-3x"></i></button>
            </div>
            </div>
        </div>
    </div>

    

    @if ((Order != null && Order.Customer != null) || (searchedOrders != null && searchedOrders.Any()))
                    {

        <EditForm Model="Order">
            <div class="row">
                <div class="col-md-3">

                    <div class="mb-3">

                        <label for="custcode" class="form-label">Customer Code</label>
                        <div class="d-flex">
                        <button class="btn btn-primary mx-1" @onclick="ShowCustomerModal"><i class="oi oi-eye text-white oi-3x"></i></button>
                            @if (searchedOrders != null && searchedOrders.Any())
                            {
                                <InputText id="custcode" @bind-Value="searchedOrders[0].CustomerCustCode" class="form-control" readonly />
                            }
                            else
                            {
                                <InputText id="custcode" @bind-Value="Order.CustomerCustCode" class="form-control" readonly />
                            }
                        </div>
                    </div>
                </div>

                <div class="col-md-3">
                    <div class="mb-3">
                        <label for="fname" class="form-label">Full Name</label>
                        @if (searchedOrders != null && searchedOrders.Any())
                        {
                            <InputText id="custcode" @bind-Value="searchedOrders[0].Customer.FullName" class="form-control" readonly />
                        }
                        else
                        {
                            <InputText id="custcode" @bind-Value="Order.Customer.FullName" class="form-control" readonly />
                        }
                    </div>
                </div>

              

                <div class="col-md-3">

                    <div class="mb-3">
                        <label for="billto" class="form-label">Bill To</label>
                        @if (searchedOrders != null && searchedOrders.Any())
                        {
                            <InputText id="billto" @bind-Value="searchedOrders[0].Customer.BillAddress" class="form-control" readonly />
                        }
                        else
                        {
                            <InputText id="billto" @bind-Value="Order.Customer.BillAddress" class="form-control" readonly />
                        }
                    </div>
                </div>


                <div class="col-md-3">
                    <div class="mb-3">
                        <label for="orderno" class="form-label">Order No.</label>
                        <div class="d-flex">
                         
                            @if (searchedOrders != null && searchedOrders.Any())
                            {
                                <InputNumber id="orderno" @bind-Value="searchedOrders[0].OrderNo" class="form-control" readonly />
                            }
                            else
                            {
                                <InputNumber id="orderno" @bind-Value="Order.OrderNo" class="form-control"  />
                            }
                            
                        </div>
                        
                    </div>
                </div>


                <div class="col-md-3">

                    <div class="mb-3">
                        <label for="address" class="form-label">Address</label>
                        @if (searchedOrders != null && searchedOrders.Any())
                        {
                            <InputText id="address" @bind-Value="searchedOrders[0].Customer.BillAddress" class="form-control" readonly />
                        }
                        else
                        {
                            <InputText id="address" @bind-Value="Order.Customer.BillAddress" class="form-control" readonly />
                        }
                    </div>
                </div>

                <div class="col-md-3">
                </div>

                <div class="col-md-3">

                    <div class="mb-3">
                        <label for="shipto" class="form-label">Ship To</label>
                            @if (searchedOrders != null && searchedOrders.Any())
                        {
                            <InputText id="shipto" @bind-Value="searchedOrders[0].Customer.ShipAddress" class="form-control" readonly />
                        }
                        else
                        {
                            <InputText id="shipto" @bind-Value="Order.Customer.ShipAddress" class="form-control" readonly />
                        }
                    </div>
                </div>



                <div class="col-md-3">

                    <div class="mb-3">
                        <label for="orderdate" class="form-label">Order Date</label>
                        @if (searchedOrders != null && searchedOrders.Any())
                        {
                            <InputDate id="orderdate" @bind-Value="searchedOrders[0].OrderDate" class="form-control" readonly />
                        }
                        else
                        {
                            <InputDate id="orderdate" @bind-Value="Order.OrderDate" class="form-control" readonly />
                        }
                    </div>
                </div>

            </div>
            
        </EditForm>

    }
    
    else
    {
        <p>Loading...</p>
    }

    <!--Customer modal -->

    <div class="modal" tabindex="-1" role="dialog" aria-labelledby="customerModalLabel" style="@(isCustomerModalOpen ? "display: block;" : "display: none;")">
        <div class="modal-dialog modal-xl modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-black" id="customerModalLabel">Select Customer</h5>
                    <button type="button" class="close" @onclick="CloseCustomerModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="d-flex ms-auto col-md-3">
                        <div class="input-group position-relative ms-3 d-flex align-items-center">
                          
                            <div class="input-group-prepend">
                           
                                <span class="input-group-text bg-transparent border-0">
                                    <i class="oi oi-magnifying-glass text-muted oi-3x"></i>
                                </span>
                            </div>

                            <input class="form-control pl-4 focus-highlight" type="search" @bind="searchTerm" placeholder="Search" aria-label="Search" @bind:event="oninput" @onkeyup="async () => await SearchCustomers()">

                        </div>
                    </div>


                </div>




                @if (CustomerService.PagedCustomers != null)
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover ">
                            <thead>
                                <tr>
                                    <th class="text-nowrap">
                                       
                                    </th>
                                    <th class="text-nowrap">Customer Code</th>
                                    <th class="text-nowrap">First Name</th>
                                    <th class="text-nowrap">Middle Name</th>
                                    <th class="text-nowrap">Last Name</th>
                                   
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var customer in CustomerService.PagedCustomers.Items)
                                {
                                    var customerViewModel = ConvertToCustomerViewModel(customer);
                                    <tr class="@((CustomerService.GetRecentlyUpdatedCustomerIds().Contains(customer.CustCode)) ? "recently-updated" : "")">
                                        <td>
                                            <input type="radio" name="selectedCustomer" value="@customer.CustCode" checked="@(customer.CustCode == selectedCustomer?.CustCode)" @onchange="() => SelectCustomer(customerViewModel)" />
                                        </td>

                                        <td>@customer.CustCode</td>
                                        <td>@customer.Fname</td>
                                        <td>@customer.Mname</td>
                                        <td>@customer.Lname</td>
               
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <nav aria-label="...">
                        <ul class="pagination mt-3">
                            <li class="page-item @(CustomerService.PagedCustomers.CurrentPage == 1 ? "disabled" : "")">
                                <a class="page-link" @onclick="(() => LoadCustomers(CustomerService.PagedCustomers.CurrentPage - 1))">Previous</a>
                            </li>

                            @for (int i = 1; i <= CustomerService.PagedCustomers.TotalPages; i++)
                            {
                                int j = i;
                                <li class="page-item @(i == CustomerService.PagedCustomers.CurrentPage ? "active" : "")">
                                    <a class="page-link" @onclick="(() => LoadCustomers(j))">@i</a>
                                </li>
                            }

                            <li class="page-item @(CustomerService.PagedCustomers.CurrentPage == CustomerService.PagedCustomers.TotalPages ? "disabled" : "")">
                                <a class="page-link" @onclick="(() => LoadCustomers(CustomerService.PagedCustomers.CurrentPage + 1))">Next</a>
                            </li>
                        </ul>
                    </nav>

                }
                <div class="modal-footer d-flex justify-content-end">
                    <button type="button" class="btn btn-secondary" @onclick="CloseCustomerModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SelectCustomer">Select</button>
                </div>
                </div>
               
            </div>
        </div>
    </div>



<div class="modal-backdrop fade show" style="@(isCustomerModalOpen ? "display: block; z-index: 1052;" : "display: none; opacity: 0.5;")"></div>

<!-- End of Customer Modal -->

<!--Order No. modal -->

    <div class="modal" tabindex="-1" role="dialog" aria-labelledby="customerModalLabel" style="@(isOrderNoModalOpen ? "display: block;" : "display: none;")">
        <div class="modal-dialog modal-xl modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-black" id="customerModalLabel">Select Customer</h5>
                    <button type="button" class="close" @onclick="CloseOrderNo" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="d-flex ms-auto col-md-3">
                        <div class="input-group position-relative ms-3 d-flex align-items-center">
                          
                            <div class="input-group-prepend">
                           
                                <span class="input-group-text bg-transparent border-0">
                                    <i class="oi oi-magnifying-glass text-muted oi-3x"></i>
                                </span>
                            </div>

                            <input class="form-control pl-4 focus-highlight" type="search" @bind="searchTerm" placeholder="Search" aria-label="Search" @bind:event="oninput" @onkeyup="async () => await SearchCustomers()">

                        </div>
                    </div>


                </div>




                @if (OrderService.PagedOrder != null)
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover ">
                            <thead>
                                <tr>
                                    <th class="text-nowrap">
                                       
                                    </th>
                                    <th class="text-nowrap">Order No.</th>
                                    <th class="text-nowrap">Customer Code</th>
                                    <th class="text-nowrap">Order Date</th>
                                </tr>
                            </thead>
                            <tbody>
                            
                                @foreach (var order in OrderService.PagedOrder)
                                {
                                    <tr>
                                    <td>
                                    </td>
                                        <td>@order.OrderNo</td>
                                        <td>@order.CustomerCustCode</td>
                                        <td>@order.OrderDate.ToShortDateString()</td>
                                    </tr>
                                }
                            
                           
                            </tbody>
                        </table>
                    </div>

              <!--      <nav aria-label="...">
                        <ul class="pagination mt-3">
                            <li class="page-item @(OrderService.PagedOrders.CurrentPage == 1 ? "disabled" : "")">
                                <a class="page-link" @onclick="(() => LoadOrders(OrderService.PagedOrders.CurrentPage - 1))">Previous</a>
                            </li>

                            @for (int i = 1; i <= OrderService.PagedOrders.TotalPages; i++)
                            {
                                int j = i;
                                <li class="page-item @(i == OrderService.PagedOrders.CurrentPage ? "active" : "")">
                                    <a class="page-link" @onclick="(() => LoadOrders(j))">@i</a>
                                </li>
                            }

                            <li class="page-item @(OrderService.PagedOrders.CurrentPage == OrderService.PagedOrders.TotalPages ? "disabled" : "")">
                                <a class="page-link" @onclick="(() => LoadOrders(OrderService.PagedOrders.CurrentPage + 1))">Next</a>
                            </li>
                        </ul>
                    </nav>
                      -->
                }
            else
            {
                <div>No orders found.</div>
            }
                </div>
            </div>
        </div>
  



<div class="modal-backdrop fade show" style="@(isOrderNoModalOpen ? "display: block; z-index: 1052;" : "display: none; opacity: 0.5;")"></div>

<!-- End of Order No, Modal -->

<!-- Product Modal -->

 <div class="modal" tabindex="-1" role="dialog" aria-labelledby="customerModalLabel" style="@(isProductModalOpen ? "display: block;" : "display: none;")">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-black" id="customerModalLabel">Select Product</h5>
                    <button type="button" class="close" @onclick="CloseProductModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="d-flex ms-auto col-md-3">
                        <div class="input-group position-relative ms-3 d-flex align-items-center">
            
                            <div class="input-group-prepend">
              
                                <span class="input-group-text bg-transparent border-0">
                                    <i class="oi oi-magnifying-glass text-muted oi-3x"></i>
                                </span>
                            </div>

                            <input class="form-control pl-4 focus-highlight" type="search" @bind="searchTerm" placeholder="Search" aria-label="Search" @bind:event="oninput" @onkeyup="async () => await SearchProducts()">

               

                        </div>
                    </div>


                </div>




                @if (ProductService.PagedProducts != null)
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover ">
                            <thead>
                                <tr>
                                    <th class="text-nowrap">
                                        
                                    </th>
                                    <th class="text-nowrap">Product Code</th>
                                    <th class="text-nowrap">Product Name</th>
                                    <th class="text-nowrap">Price</th>
                                    
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var product in ProductService.PagedProducts.Items)
                                {
                                var productViewModel = ConvertToProductViewModel(product);
                                    <tr class="@((CustomerService.GetRecentlyUpdatedCustomerIds().Contains(product.ProdCode)) ? "recently-updated" : "")">
                                        
                                    <td>
                                        <input type="radio" name="selectedProduct" value="@product.ProdCode" checked="@(product.ProdCode == selectedProduct?.ProdCode)" @onchange="() => SelectProduct(productViewModel)" />
                                    </td>
                                    <td>@product.ProdCode</td>
                                    <td>@product.Name</td>
                                    <td>@(FormatCurrency(product.Price))</td>

                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <nav aria-label="...">
                        <ul class="pagination mt-3">
                            <li class="page-item @(ProductService.PagedProducts.CurrentPage == 1 ? "disabled" : "")">
                                <a class="page-link" @onclick="(() => LoadProducts(CustomerService.PagedCustomers.CurrentPage - 1))">Previous</a>
                            </li>

                            @for (int i = 1; i <= ProductService.PagedProducts.TotalPages; i++)
                            {
                                int j = i;
                                <li class="page-item @(i == ProductService.PagedProducts.CurrentPage ? "active" : "")">
                                    <a class="page-link" @onclick="(() => LoadProducts(j))">@i</a>
                                </li>
                            }

                            <li class="page-item @(ProductService.PagedProducts.CurrentPage == ProductService.PagedProducts.TotalPages ? "disabled" : "")">
                                <a class="page-link" @onclick="(() => LoadCustomers(ProductService.PagedProducts.CurrentPage + 1))">Next</a>
                            </li>
                        </ul>
                    </nav>

                }
                <div class="modal-footer d-flex justify-content-end">
                    <button type="button" class="btn btn-secondary" @onclick="CloseProductModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SelectProduct">Select</button>
                </div>
                </div>
               
            </div>
        </div>
   



<div class="modal-backdrop fade show" style="@(isProductModalOpen ? "display: block; z-index: 1052;" : "display: none; opacity: 0.5;")"></div>

<!--End of Product Modal -->

<div class="container mt-4">
    <div class="row">
        <div class="col">
            <div class="shadow p-3 mb-5 bg-white rounded ">
                <div class="d-flex justify-content-between">
                  
                    <button class="btn btn-primary mb-3 mt-4" @onclick="DisplayOrderModal"
                            disabled="@(string.IsNullOrWhiteSpace(Order.CustomerCustCode) &&
                   (searchedOrders == null || searchedOrders[0].OrderNo == 0))">
                        <i class="oi oi-plus text-white oi-3x"></i>
                    </button>

                    @if (string.IsNullOrWhiteSpace(Order.CustomerCustCode) || (searchedOrders == null || searchedOrders[0].OrderNo == 0))
                    {
                        Console.WriteLine("Order.CustomerCustCode: " + Order.CustomerCustCode);
                        if (searchedOrders != null && searchedOrders.Any())
                        {
                            Console.WriteLine("searchedOrders[0].OrderNo: " + searchedOrders[0].OrderNo);
                        }
                        else
                        {
                            Console.WriteLine("searchedOrders is null or empty");
                        }
                    }

                    <div class="d-flex align-items-center">
             
                        <div>
                            <button type="button" class="btn btn-primary mx-3" @onclick="() => CreateOrder()" disabled="@((Order.Customer == null || string.IsNullOrWhiteSpace(Order.CustomerCustCode)) || (searchedOrders != null && searchedOrders.Any()))">Submit</button>
                        </div>
                    </div>
                </div>

                <table class="table table-striped table-hover ">
                    <thead>
                        <tr>
                            <th>No.</th>
                            <th>Product Code</th>
                            <th>Description</th>
                            <th>Quantity</th>
                            <th>Price</th>
                            <th>Total</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var order in selectedOrders.OrderByDescending(o => o.RowNo))
                        {
                            <tr>
                                <td>@order.RowNo</td>
                                <td>@order.ProductProdCode</td>
                                <td>@order.Product.Name</td>
                                <td>@order.Qty</td>
                                <td>@String.Format("{0:N2}", order.Price)</td>
                                <td>@String.Format("{0:N2}", order.Qty * order.Price)</td>
                                <td>
                                    <button class="btn btn-success" @onclick="() => EditOrderViewModel(order.RowNo, order.ProductProdCode, order.OrderNo)"><i class="oi oi-pencil text-white oi-3x"></i></button>
                                    <button class="btn btn-danger" @onclick="() => DeleteOrderViewModel(order.ProductProdCode)"><i class="oi oi-trash text-white oi-3x"></i></button>
                                </td>
                                
                            </tr>
                        }
                        @if (searchedOrders != null && searchedOrders.Any())
                        {
                            @foreach (var order in searchedOrders)
                            {
                                <tr>
                                    <!-- Display fields related to each order in searchedOrders -->
                                    <td>@order.RowNo</td>
                                    <td>@order.ProductProdCode</td>
                                    <td>@order.Product.Name</td>
                                    <td>@order.Qty</td>
                                    <td>@String.Format("{0:N2}", order.Price)</td>
                                    <td>@String.Format("{0:N2}", order.Qty * order.Price)</td>
                                    <td>
                                        <button class="btn btn-success" @onclick="() => EditProdOrder(order.RowNo, order.ProductProdCode, order.OrderNo)"><i class="oi oi-pencil text-white oi-3x"></i></button>
                                        <button class="btn btn-danger" @onclick="() => DeleteOrder(order.RowNo, order.ProductProdCode, order.OrderNo)"><i class="oi oi-trash text-white oi-3x"></i></button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
                
                
                       
                    </div>
                

            </div>
        </div>
    </div>


<div class="modal" tabindex="-1" role="dialog" aria-labelledby="customerModalLabel" style="@(isOrderModalOpen ? "display: block; z-index: 1051;" : "display: none;")">
    <div class="modal-dialog modal-xl modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-black" id="customerModalLabel">
                    @if (IsEditMode)
                    {
                        <span>Edit Order</span>
                    }
                    else
                    {
                        <span>Select Product</span>
                    }
                </h5>
                <button type="button" class="close" @onclick="CloseOrderModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
         
            <div class="modal-body">
                <div class="mb-3 d-flex">
                    @if (!IsEditMode) // Render the button only if not in edit mode
                    {
                        <button class="btn btn-primary" @onclick="ShowProductModal"><i class="oi oi-eye text-white oi-3x"></i></button>
                    }

                    <div class="d-flex ms-auto col-md-3">
                        <div class="input-group position-relative ms-3 d-flex align-items-center">
 
                        </div>
                    </div>


                </div>

            </div>




            @if ((Order != null && Order.Product != null) || (searchedOrders != null && searchedOrders.Any()))
            {
                <div class="container px-5">
                    <EditForm Model="Order">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="prodcode" class="form-label">Product Code</label>
                                    <InputText id="prodcode" @bind-Value="Order.ProductProdCode" class="form-control" readonly />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="productname" class="form-label">Product Name</label>
                                    <InputText id="productname" @bind-Value="Order.Product.Name" class="form-control" readonly />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="qty" class="form-label">Quantity</label>
                                    <InputNumber id="qty" @bind-Value="Order.Qty" class="form-control" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="price" class="form-label">Price</label>
                                    <InputNumber id="price" @bind-Value="Order.Price" class="form-control"  />
                                </div>
                            </div>
                        </div>
                    </EditForm>
                </div>
            }
            else
            {
                <p>Loading...</p>
            }

            <div class="modal-footer d-flex justify-content-end">
                <button type="button" class="btn btn-secondary" @onclick="CloseOrderModal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="SelectOrder">Select</button> 
            </div>
        </div>

    </div>
</div>

<div class="modal-backdrop fade show" style="@(isOrderModalOpen ? "display: block;" : "display: none; opacity: 0.5;")"></div>



@code {
    bool isAddingOrder = false;
    private List<OrderViewModel> orders;
    private string searchOrderNo, customerCustCode;

    private List<OrderViewModel> searchedOrders;
    private bool isCustomerModalOpen = false;
    private bool isProductModalOpen = false;
    private bool isOrderNoModalOpen = false;    
    private bool isOrderModalOpen = false;
    private bool IsEditMode { get; set; }
    private CustomerViewModel? selectedCustomer;
    private List<OrderViewModel> selectedOrders = new List<OrderViewModel>();
    private ProductViewModel? selectedProduct;
    private bool selectAllCheckedCustomers;
    private bool selectAllCheckedProducts;
    private bool selectAllCheckedOrders;
    private string searchTerm = string.Empty;
    private Dictionary<OrderViewModel, bool> orderSelection = new Dictionary<OrderViewModel, bool>();




    public OrderViewModel Order = new ();
    public Order AddOrder = new();
    public OrderViewModel SearchedOrder;


    protected override async Task OnInitializedAsync()
    {
        await CustomerService.GetCustomers();
        await ProductService.GetProducts();
        await OrderService.GetOrders();
        await LoadOrders();
        await LoadCustomers();
        await LoadProducts();



        Order = new OrderViewModel
            {
                Qty = 1,
                OrderDate = DateTime.Today
            };


        if (Order == null)
        {
            Order = new OrderViewModel();        }

        if (Order.Customer == null)
        {
            Order.Customer = new CustomerViewModel();

        }

        if (Order.Product == null)
        {
            Order.Product = new ProductViewModel();
        }

    }

    private CustomerViewModel ConvertToCustomerViewModel(OrderingSystem.Shared.Customer customer)
    {

        CustomerViewModel customerViewModel = new CustomerViewModel
            {
                CustCode = customer.CustCode,
                Fname = customer.Fname,
                Mname = customer.Mname,
                Lname = customer.Lname,
                FullName = $"{customer.Fname} {customer.Lname}",
                BillAddress = customer.BillAddress,
                ShipAddress = customer.ShipAddress,
                Email = customer.Email,
                MobileNum = customer.MobileNum,
                HomeNum = customer.HomeNum,

            };

        return customerViewModel;
    }


    private ProductViewModel ConvertToProductViewModel(OrderingSystem.Shared.Product product)
    {

        ProductViewModel productViewModel = new ProductViewModel
            {
                ProdCode = product.ProdCode,
                Name = product.Name,
                Price = product.Price,

            };

        return productViewModel;
    }




    private async Task LoadCustomers(int page = 1, int pageSize = 10)
    {
        await CustomerService.GetCustomers(page, pageSize, searchTerm);
    }

    private async Task LoadOrders()
    {
        await OrderService.GetOrders();

        OrderService.PagedOrder = OrderService.PagedOrder;

    }

    private async Task LoadProducts(int page = 1, int pageSize = 10)
    {
        await ProductService.GetProducts(page, pageSize, searchTerm);
    }

    string FormatCurrency(decimal value)
    {
        return $"₱{value.ToString("N2")}";
    }


    private void ShowCustomerModal()
    {
        isCustomerModalOpen = true;
    }

    private void ShowOrderNo()
    {
        isOrderNoModalOpen = true;
    }

    private void CloseOrderNo()
    {
        isOrderNoModalOpen = false;
    }

    private void ShowProductModal()

    {
        //selectedProducts.Clear();
        isProductModalOpen = true;
    }

    private void ShowOrderModal()
    {
        if (!IsEditMode)
        {
            Order.ProductProdCode = null;
            Order.Price = 0;
            Order.Qty = 1;
            Order.Product.Name = null;
        }


        isOrderModalOpen = true;
    }


    private void DisplayOrderModal()
    {
        if (Order != null && Order.OrderNo > 0)
        {
            // Check if the order number exists in the client-side data
            bool orderExists = OrderService.PagedOrder.Any(order => order.OrderNo == Order.OrderNo);

            if (orderExists)
            {
                // Display an error message using SweetAlert
                Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "Order number already exists. Please use different order number",
                        Icon = SweetAlertIcon.Error
                    });
                return; // Exit the method
            }
        }

        // Proceed with displaying the modal
        if (!IsEditMode)
        {
            Order.ProductProdCode = null;
            Order.Price = 0;
            Order.Qty = 1;
            Order.Product.Name = null;
        }

        isOrderModalOpen = true;
    }





    private void CloseCustomerModal()
    {
        isCustomerModalOpen = false;
    }

    private void CloseOrderModal()
    {

        isOrderModalOpen = false;
    }

    private void CloseProductModal()
    {
        isProductModalOpen = false;
    }

    private void NewOrder()
    {
        NavigationManager.NavigateTo("/orders", true);
    }

    /*
    private async Task CreateOrder()
      {

      await OrderService.CreateOrder(selectedOrders);

      await LoadOrders();
    }
    */
    private async Task CreateOrder()
    {
        isAddingOrder = true;
        Console.WriteLine("Order No before confirmation: " + Order.OrderNo);
        // Display confirmation dialog
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmation",
                Text = "Are you sure you want to create this order?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                ConfirmButtonColor = "#3085d6",
                CancelButtonColor = "#d33",
                ConfirmButtonText = "Yes",
                CancelButtonText = "No"
            });

        // Check if the user confirmed
        if (result.IsConfirmed)
        {
            Console.WriteLine("Order No before order creation: " + Order.OrderNo);

            await OrderService.CreateOrder(selectedOrders);
            await LoadOrders();

            // Display success message
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Success",
                    Text = "Order created successfully!",
                    Icon = SweetAlertIcon.Success
                });
        }
    }




    private void ToggleSelectedOrder(OrderViewModel order)
    {

        if (selectedOrders.Contains(order))
        {

            orderSelection[order] = false;
        }
        else
        {

            orderSelection[order] = true;
        }



    }

    private async Task SelectOrder()
    {
        if (IsEditMode) 
        {
            if (searchedOrders != null && searchedOrders.Any())
            {
                
                /*
                 * await OrderService.UpdateOrder(Order.RowNo, Order.ProductProdCode, Order.OrderNo, Order);


                await OrderService.GetOrders();


                searchedOrders = OrderService.PagedOrder.Where(order => order.OrderNo == Order.OrderNo).ToList();

                Console.WriteLine("searchedOrders after update: ");
                foreach (var order in searchedOrders)
                {
                    Console.WriteLine($"RowNo: {order.RowNo}, ProductProdCode: {order.ProductProdCode}, Qty: {order.Qty}, Price: {order.Price}");
                }

                CloseOrderModal();
                StateHasChanged();
                IsEditMode = false;

                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Success",
                        Text = "Order updated successfully!",
                        Icon = SweetAlertIcon.Success
                    });
                 */
                var confirmationResult = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Confirm Update",
                        Text = "Are you sure you want to update this order?",
                        Icon = SweetAlertIcon.Question,
                        ShowCancelButton = true,
                        ConfirmButtonText = "Yes",
                        CancelButtonText = "No"
                    });

                if (confirmationResult.IsConfirmed)
                {
                    // Update the order
                    await OrderService.UpdateOrder(Order.RowNo, Order.ProductProdCode, Order.OrderNo, Order);

                    // Reload orders
                    await OrderService.GetOrders();

                    // Update searchedOrders with the updated order
                    searchedOrders = OrderService.PagedOrder.Where(order => order.OrderNo == Order.OrderNo).ToList();

                    Console.WriteLine("searchedOrders after update: ");
                    foreach (var order in searchedOrders)
                    {
                        Console.WriteLine($"RowNo: {order.RowNo}, ProductProdCode: {order.ProductProdCode}, Qty: {order.Qty}, Price: {order.Price}");
                    }

                    // Close the modal
                    CloseOrderModal();

                    // Trigger UI update
                    StateHasChanged();

                    IsEditMode = false;

                    await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Success",
                            Text = "Order updated successfully!",
                            Icon = SweetAlertIcon.Success
                        });
                }

            }
            else
            {

               /*
                 * var existingOrder = selectedOrders.FirstOrDefault(o => o.RowNo == Order.RowNo && o.ProductProdCode == Order.ProductProdCode && o.OrderNo == Order.OrderNo);
                 if (existingOrder != null)
                 {
                     existingOrder.Qty = Order.Qty;
                     existingOrder.Price = Order.Price;
                 }


                 Console.WriteLine("selectedOrders after update: ");
                 foreach (var order in selectedOrders)
                 {
                     Console.WriteLine($"RowNo: {order.RowNo}, ProductProdCode: {order.ProductProdCode}, Qty: {order.Qty}, Price: {order.Price}");
                 }

                 CloseOrderModal();
                 IsEditMode = false;
                 await Swal.FireAsync(new SweetAlertOptions
                     {
                         Title = "Success",
                         Text = "Order updated successfully!",
                         Icon = SweetAlertIcon.Success
                     });
                 * */

                var confirmationResult = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Confirm Update",
                        Text = "Are you sure you want to update this order?",
                        Icon = SweetAlertIcon.Question,
                        ShowCancelButton = true,
                        ConfirmButtonText = "Yes",
                        CancelButtonText = "No"
                    });

                if (confirmationResult.IsConfirmed)
                {
                    var existingOrder = selectedOrders.FirstOrDefault(o => o.RowNo == Order.RowNo && o.ProductProdCode == Order.ProductProdCode && o.OrderNo == Order.OrderNo);
                    if (existingOrder != null)
                    {
                        existingOrder.Qty = Order.Qty;
                        existingOrder.Price = Order.Price;
                    }

                    Console.WriteLine("selectedOrders after update: ");
                    foreach (var order in selectedOrders)
                    {
                        Console.WriteLine($"RowNo: {order.RowNo}, ProductProdCode: {order.ProductProdCode}, Qty: {order.Qty}, Price: {order.Price}");
                    }

                    CloseOrderModal(); // Close the modal here

                    StateHasChanged();
                    IsEditMode = false;
                }

                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Success",
                        Text = "Order updated successfully!",
                        Icon = SweetAlertIcon.Success
                    });

            }

        }
        else 
        {

            @if (searchedOrders != null && searchedOrders.Any())
            {
                isAddingOrder = false;
                int orderNo = Order.OrderNo;

                // Call the OrderService to get the latest row number
                int latestRowNo = await OrderService.GetNextRowNo(orderNo);
                Console.WriteLine($"Latest Row Number: {latestRowNo}");

                // Calculate the next row number based on the existing orders
                int nextRowNo = searchedOrders.Count > 0 ? searchedOrders.Max(o => o.RowNo) + 1 : latestRowNo;
                Console.WriteLine($"Next Row Number: {nextRowNo}");

                var selectedOrder = searchedOrders.FirstOrDefault();
                if (selectedOrder != null)
                {
                    // Set CustomerCustCode based on the selected customer
                    Order.CustomerCustCode = selectedOrder.CustomerCustCode;
                    Order.RowNo = nextRowNo;
                    Order.OrderNo = selectedOrder.OrderNo;

                    // Add the order
                    await OrderService.AddOrder(Order);

                    // Log a message to verify execution
                    Console.WriteLine("Order added successfully.");

                    // Reload orders
                    await OrderService.GetOrders();

                    searchedOrders = await OrderService.GetOrders();

                    // Log a message to verify orders are reloaded
                    Console.WriteLine("Orders reloaded successfully.");

                    // Trigger UI update
                    StateHasChanged();
                    isAddingOrder = false;
                }
              
            }



            else
            {
                int orderNo = Order.OrderNo;
                string custCode = Order.CustomerCustCode;
                int latestRowNo = await OrderService.GetNextRowNo(orderNo);


                int nextRowNo = selectedOrders.Count > 0 ? selectedOrders.Max(o => o.RowNo) + 1 : latestRowNo;

                var newOrder = new OrderViewModel
                    {
                        // Assign values from the Order object to the new order
                        Customer = Order.Customer,
                        CustomerCustCode = Order.CustomerCustCode,
                        Qty = Order.Qty,
                        RowNo = nextRowNo, // You may need to adjust this based on your application logic
                        OrderNo = Order.OrderNo,
                        OrderDate = Order.OrderDate,
                        Price = Order.Price,
                        ProductProdCode = Order.ProductProdCode,
                        Product = new ProductViewModel
                        {
                            ProdCode = Order.Product.ProdCode,
                            Name = Order.Product.Name,
                        }
                    };

                selectedOrders.Add(newOrder);


            }
        }

        Console.WriteLine($"CustCode: {Order.OrderNo}");

        CloseOrderModal();
        StateHasChanged();
    }

    private async Task SearchCustomers()
    {
        await LoadCustomers();
    }

    private async Task SearchProducts()
    {
        await LoadProducts();
    }

    private void SelectCustomer(CustomerViewModel customer)
    {
        selectedCustomer = customer;
        StateHasChanged();
        Console.WriteLine("Selected Customer: " + selectedCustomer?.FullName); // Log selected customer
    }

    private async Task SelectCustomer()
    {
        if (selectedCustomer != null)
        {
            Order.CustomerCustCode = selectedCustomer.CustCode;
            Order.Customer.FullName = $"{selectedCustomer.Fname} {selectedCustomer.Lname}";
            Order.Customer.BillAddress = selectedCustomer.BillAddress;
            Order.Customer.ShipAddress = selectedCustomer.ShipAddress;
            Order.Customer.MobileNum = selectedCustomer.MobileNum;
            Order.Customer.HomeNum = selectedCustomer.HomeNum;

            CloseCustomerModal();

            selectedCustomer = null; // Reset selected customer
            Console.WriteLine("Selected Customer after reset: " + selectedCustomer?.FullName); // Log selected customer after reset
            StateHasChanged(); // Ensure component rerender
        }
    }

    private void SelectProduct(ProductViewModel product)
    {
        selectedProduct = product;
        StateHasChanged();
        Console.WriteLine("Selected Customer: " + selectedCustomer?.FullName); // Log selected customer
    }

    private async Task SelectProduct()
    {
        if (selectedProduct != null)
        {
            Order.ProductProdCode = selectedProduct.ProdCode;

            Order.Product.Name = selectedProduct.Name;

            Order.Price = selectedProduct.Price;

            CloseProductModal();

            selectedProduct = null; // Reset selected customer
            Console.WriteLine("Selected Customer after reset: " + selectedCustomer?.FullName); // Log selected customer after reset
            StateHasChanged(); // Ensure component rerender
        }
    }



    private void ToggleSelectAllOrders()
    {

        selectAllCheckedOrders = !selectAllCheckedOrders;


        foreach (var order in selectedOrders)
        {

            orderSelection[order] = selectAllCheckedOrders;
        }


    }


    /*
    * void DeleteOrderViewModel(string productProdCodeToDelete)
       {
       var orderToDelete = selectedOrders.FirstOrDefault(c => c.ProductProdCode == productProdCodeToDelete );

           if(orderToDelete is not null)
           {
           selectedOrders.Remove(orderToDelete);
    }

    }
    */

    async Task DeleteOrderViewModel(string productProdCodeToDelete)
    {
        // Find the order to delete
        var orderToDelete = selectedOrders.FirstOrDefault(c => c.ProductProdCode == productProdCodeToDelete);

        // Check if the order exists
        if (orderToDelete != null)
        {
            // Display confirmation dialog
            var result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Confirmation",
                    Text = "Are you sure you want to delete this order?",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    ConfirmButtonColor = "#3085d6",
                    CancelButtonColor = "#d33",
                    ConfirmButtonText = "Yes",
                    CancelButtonText = "No"
                });

            // Check if the user confirmed
            if (result.IsConfirmed)
            {
                // Remove the order from selectedOrders
                selectedOrders.Remove(orderToDelete);

                // Display success message
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Success",
                        Text = "Order deleted successfully!",
                        Icon = SweetAlertIcon.Success
                    });
            }
        }
    }



    void EditOrderViewModel(int rowNo, string productProdCodeToEdit, int orderNo)
    {
        Console.WriteLine("EditOrderViewModel called with rowNo: " + rowNo);

        // Find the order to edit
        var orderToEdit = selectedOrders.FirstOrDefault(c => c.ProductProdCode == productProdCodeToEdit && c.RowNo == rowNo && c.OrderNo == orderNo);

        if (orderToEdit != null)
        {
            Console.WriteLine("Order to edit found: " + orderToEdit.RowNo);

            // Create a new instance of OrderViewModel to represent the order to be edited
            var editedOrder = new OrderViewModel
                {
                    Customer = orderToEdit.Customer,
                    CustomerCustCode = orderToEdit.CustomerCustCode,
                    Qty = orderToEdit.Qty,
                    RowNo = orderToEdit.RowNo,
                    OrderNo = orderToEdit.OrderNo,
                    OrderDate = orderToEdit.OrderDate,
                    Price = orderToEdit.Price,
                    ProductProdCode = orderToEdit.ProductProdCode,
                    Product = new ProductViewModel
                    {
                        ProdCode = orderToEdit.Product.ProdCode,
                        Name = orderToEdit.Product.Name,
                    }
                };

            // Set the Order to the edited order
            Order = editedOrder;
            IsEditMode = true;
            ShowOrderModal();
        }
        else
        {
            Console.WriteLine("No order found for productProdCode: " + rowNo);
        }
    }



                    /*
                    * async Task EditOrderViewModel(int rowNo, string productProdCodeToEdit, int orderNo)
            {
            Console.WriteLine("EditOrderViewModel called with rowNo: " + rowNo);

            // Find the order to edit
        var orderToEdit = selectedOrders.FirstOrDefault(c => c.ProductProdCode == productProdCodeToEdit && c.RowNo == rowNo && c.OrderNo == orderNo);

    if (orderToEdit != null)
    {
    // Display confirmation dialog
    var result = await Swal.FireAsync(new SweetAlertOptions
    {
    Title = "Confirmation",
    Text = "Are you sure you want to edit this order?",
    Icon = SweetAlertIcon.Question,
    ShowCancelButton = true,
    ConfirmButtonColor = "#3085d6",
            CancelButtonColor = "#d33",
            ConfirmButtonText = "Yes",
            CancelButtonText = "No"
            });

            // Check if the user confirmed
                    if (result.IsConfirmed)
                    {
                    Console.WriteLine("Order to edit found: " + orderToEdit.RowNo);

                    // Create a new instance of OrderViewModel to represent the order to be edited
    var editedOrder = new OrderViewModel
    {
    Customer = orderToEdit.Customer,
    CustomerCustCode = orderToEdit.CustomerCustCode,
    Qty = orderToEdit.Qty,
    RowNo = orderToEdit.RowNo,
        OrderNo = orderToEdit.OrderNo,
        OrderDate = orderToEdit.OrderDate,
        Price = orderToEdit.Price,
        ProductProdCode = orderToEdit.ProductProdCode,
            Product = new ProductViewModel
            {
            ProdCode = orderToEdit.Product.ProdCode,
        Name = orderToEdit.Product.Name,
            }
            };

        // Set the Order to the edited order
    Order = editedOrder;
    IsEditMode = true;
        ShowOrderModal();


        }
        }
        else
        {
        Console.WriteLine("No order found for productProdCode: " + rowNo);
     }
     }
     */





    private async void ResetState()
    {
        // Reset the state
        if (searchedOrders != null && searchedOrders.Any())
        {
            searchedOrders.Clear();
        }
        else
        {
            Order = new OrderViewModel
                {
                    Customer = new CustomerViewModel(),
                    Product = new ProductViewModel(),
                    Qty = 1,
                    OrderNo = 0,
                    OrderDate = DateTime.Today
                };

            selectedOrders.Clear();
            selectedProduct = null;
            selectedCustomer = null;
        }

        // Trigger a re-render to refresh the UI
        StateHasChanged();
    }

    private async Task SearchOrder()
    {
        try
        {
            // Check if the searchOrderNo is empty
            if (string.IsNullOrWhiteSpace(searchOrderNo))
            {
                // Clear the searchedOrders collection or handle it as needed
                searchedOrders = new List<OrderViewModel>(); // Clear the list or assign an empty list
                return;
            }

            // Debugging: Print searchOrderNo and customerCustCode
            Console.WriteLine($"SearchOrder called with searchOrderNo: {searchOrderNo}, customerCustCode: {customerCustCode}");

            // Call the OrderService to get orders by order number and customer code
            searchedOrders = await OrderService.GetOrdersByOrderNo(searchOrderNo);

            // Debugging: Print the count of searchedOrders
            Console.WriteLine($"Number of orders found: {searchedOrders.Count}");

            // Trigger a re-render to update the UI
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle any exceptions
            Console.WriteLine($"Error in SearchOrder: {ex.Message}");
            // You may want to display an error message to the user or handle the exception accordingly
        }
    }


    
     async void EditProdOrder(int rowNo, string productProdCodeToEdit, int orderNo)
    {
        Console.WriteLine($"ProductProdCode to edit: {productProdCodeToEdit}");
        // Fetch the order details for editing
        var orderViewModel = await OrderService.GetOrderByRowCodeOrderNo(rowNo, productProdCodeToEdit, orderNo);


        if (orderViewModel != null)
        {
            // Find the order in searchedOrders that matches the productProdCodeToEdit
            var searchedOrder = searchedOrders.FirstOrDefault(o => o.ProductProdCode == productProdCodeToEdit &&  o.RowNo == rowNo && o.OrderNo == orderNo);

            if (searchedOrder != null)
            {
                // Populate the modal with the order details for editing
                Order = orderViewModel;
                Order.Price = searchedOrder.Price; // Set the price based on the matched searchedOrder
                IsEditMode = true;   // Set IsEditMode to true to indicate edit mode
                ShowOrderModal();    // Show the modal

                // Force the component to re-render
                StateHasChanged();
            }
            else
            {
                // Handle case where the order is not found in searchedOrders
                Console.WriteLine("Order not found in searchedOrders.");
            }
        }
        else
        {
            // Handle case where the order is not found
            Console.WriteLine("Order not found.");
        }
    }
     

    
    

    /*
     * async void DeleteOrder(int rowNo, string productProdCode, int orderNo)
        {
        await OrderService.DeleteOrder(rowNo, productProdCode, orderNo);

        // Get the latest orders from OrderService
        await OrderService.GetOrders();

        // Filter the orders by the latest OrderNo
        searchedOrders = OrderService.PagedOrder.Where(order => order.OrderNo == orderNo).ToList();

        StateHasChanged();
        }
    */

    async void DeleteOrder(int rowNo, string productProdCode, int orderNo)
    {
        // Display confirmation dialog
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmation",
                Text = "Are you sure you want to delete this order?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                ConfirmButtonColor = "#3085d6",
                CancelButtonColor = "#d33",
                ConfirmButtonText = "Yes",
                CancelButtonText = "No"
            });

        // Check if the user confirmed
        if (result.IsConfirmed)
        {
            await OrderService.DeleteOrder(rowNo, productProdCode, orderNo);

            // Get the latest orders from OrderService
            await OrderService.GetOrders();

            // Filter the orders by the latest OrderNo
            searchedOrders = OrderService.PagedOrder.Where(order => order.OrderNo == orderNo).ToList();

            StateHasChanged();

            // Display success message
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Success",
                    Text = "Order deleted successfully!",
                    Icon = SweetAlertIcon.Success
                });
        }
    }

    


}
    

