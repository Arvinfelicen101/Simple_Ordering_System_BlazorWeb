@page "/orders"

@inject ICustomerService CustomerService
@inject IProductService ProductService
@inject IOrderService OrderService
@using OrderingSystem.Shared
@using OrderingSystem.Shared.ViewModels;

<div class="container bg-secondary p-5 rounded-3 text-white shadow mt-3 mb-5">
    <button class="btn btn-primary mb-3" @onclick="ShowCustomerModal"><i class="oi oi-eye text-white oi-3x"></i></button>

     @if (Order != null && Order.Customer != null)
                    {

        <EditForm Model="Order">
            <div class="row">
                <div class="col-md-3">

                    <div class="mb-3">
                        <label for="custcode" class="form-label">Customer Code</label>
                        <InputText id="custcode" @bind-Value="Order.CustomerCustCode" class="form-control" readonly />
                    </div>
                </div>

                <div class="col-md-3">
                    <div class="mb-3">
                        <label for="fname" class="form-label">Full Name</label>
                        <input id="fname" Value="@Order.Customer.FullName" class="form-control"  />
                    </div>
                </div>

              

                <div class="col-md-3">

                    <div class="mb-3">
                        <label for="billto" class="form-label">Bill To</label>
                        <InputText id="billto" @bind-Value="Order.Customer.BillAddress" class="form-control" readonly />
                    </div>
                </div>


                <div class="col-md-3">

                    <div class="mb-3">
                        <label for="orderno" class="form-label">Order No.</label>
                        <InputNumber id="orderno" @bind-Value="Order.OrderNo" class="form-control"/>
                    </div>
                </div>


                <div class="col-md-3">

                    <div class="mb-3">
                        <label for="address" class="form-label">Address</label>
                        <InputText id="address" @bind-Value="Order.Customer.BillAddress" class="form-control" readonly />
                    </div>
                </div>

                <div class="col-md-3">
                </div>

                <div class="col-md-3">

                    <div class="mb-3">
                        <label for="shipto" class="form-label">Ship To</label>
                        <InputText id="shipto" @bind-Value="Order.Customer.ShipAddress" class="form-control" readonly />
                    </div>
                </div>



                <div class="col-md-3">

                    <div class="mb-3">
                        <label for="orderdate" class="form-label">Order Date</label>
                        <InputDate id="orderdate" @bind-Value="Order.OrderDate" class="form-control" />
                    </div>
                </div>

            </div>
            
        </EditForm>

    }
    else
    {
        <p>Loading...</p>
    }

    <div class="modal" tabindex="-1" role="dialog" aria-labelledby="customerModalLabel" style="@(isCustomerModalOpen ? "display: block;" : "display: none;")">
        <div class="modal-dialog modal-xl modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-black" id="customerModalLabel">Select Customer</h5>
                    <button type="button" class="close" @onclick="CloseCustomerModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="d-flex ms-auto col-md-3">
                        <div class="input-group position-relative ms-3 d-flex align-items-center">
                          
                            <div class="input-group-prepend">
                           
                                <span class="input-group-text bg-transparent border-0">
                                    <i class="oi oi-magnifying-glass text-muted oi-3x"></i>
                                </span>
                            </div>

                            <input class="form-control pl-4 focus-highlight" type="search" @bind="searchTerm" placeholder="Search" aria-label="Search" @bind:event="oninput" @onkeyup="async () => await SearchCustomers()">

                        </div>
                    </div>


                </div>




                @if (CustomerService.PagedCustomers != null)
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover ">
                            <thead>
                                <tr>
                                    <th class="text-nowrap">
                                        <input type="checkbox" @bind="selectAllCheckedCustomers" @onclick="ToggleSelectAllCustomers" />
                                    </th>
                                    <th class="text-nowrap">Customer Code</th>
                                    <th class="text-nowrap">First Name</th>
                                    <th class="text-nowrap">Middle Name</th>
                                    <th class="text-nowrap">Last Name</th>
                                    <th class="text-nowrap">Billing Address</th>
                                    <th class="text-nowrap">Shipping Address</th>
                                    <th class="text-nowrap">Email</th>
                                    <th class="text-nowrap">Mobile Number</th>
                                    <th class="text-nowrap">Home Number</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var customer in CustomerService.PagedCustomers.Items)
                                {
                                    var customerViewModel = ConvertToCustomerViewModel(customer);
                                    <tr class="@((CustomerService.GetRecentlyUpdatedCustomerIds().Contains(customer.CustCode)) ? "recently-updated" : "")">
                                        <td>
                                            <input type="checkbox" checked="@(selectedCustomers != null && selectedCustomers.Any(c => c.CustCode == customer.CustCode))" @onchange="@((args) => ToggleSelectedCustomers(args, customerViewModel))" />
                                        </td>
                                        <td>@customer.CustCode</td>
                                        <td>@customer.Fname</td>
                                        <td>@customer.Mname</td>
                                        <td>@customer.Lname</td>
                                        <td>@customer.BillAddress</td>
                                        <td>@customer.ShipAddress</td>
                                        <td>@customer.Email</td>
                                        <td>@customer.MobileNum</td>
                                        <td>@customer.HomeNum</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <nav aria-label="...">
                        <ul class="pagination mt-3">
                            <li class="page-item @(CustomerService.PagedCustomers.CurrentPage == 1 ? "disabled" : "")">
                                <a class="page-link" @onclick="(() => LoadCustomers(CustomerService.PagedCustomers.CurrentPage - 1))">Previous</a>
                            </li>

                            @for (int i = 1; i <= CustomerService.PagedCustomers.TotalPages; i++)
                            {
                                int j = i;
                                <li class="page-item @(i == CustomerService.PagedCustomers.CurrentPage ? "active" : "")">
                                    <a class="page-link" @onclick="(() => LoadCustomers(j))">@i</a>
                                </li>
                            }

                            <li class="page-item @(CustomerService.PagedCustomers.CurrentPage == CustomerService.PagedCustomers.TotalPages ? "disabled" : "")">
                                <a class="page-link" @onclick="(() => LoadCustomers(CustomerService.PagedCustomers.CurrentPage + 1))">Next</a>
                            </li>
                        </ul>
                    </nav>

                }
                <div class="modal-footer d-flex justify-content-end">
                    <button type="button" class="btn btn-secondary" @onclick="CloseCustomerModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SelectCustomer">Select</button>
                </div>
                </div>
               
            </div>
        </div>
    </div>



<div class="modal-backdrop fade show" style="@(isCustomerModalOpen ? "display: block; z-index: 1052;" : "display: none; opacity: 0.5;")"></div>

<!-- Product Modal -->

 <div class="modal" tabindex="-1" role="dialog" aria-labelledby="customerModalLabel" style="@(isProductModalOpen ? "display: block;" : "display: none;")">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-black" id="customerModalLabel">Select Product</h5>
                    <button type="button" class="close" @onclick="CloseProductModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="d-flex ms-auto col-md-3">
                        <div class="input-group position-relative ms-3 d-flex align-items-center">
            
                            <div class="input-group-prepend">
              
                                <span class="input-group-text bg-transparent border-0">
                                    <i class="oi oi-magnifying-glass text-muted oi-3x"></i>
                                </span>
                            </div>

                            <input class="form-control pl-4 focus-highlight" type="search" @bind="searchTerm" placeholder="Search" aria-label="Search" @bind:event="oninput" @onkeyup="async () => await SearchProducts()">

               

                        </div>
                    </div>


                </div>




                @if (ProductService.PagedProducts != null)
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover ">
                            <thead>
                                <tr>
                                    <th class="text-nowrap">
                                        <input type="checkbox" @bind="selectAllCheckedProducts" @onclick="ToggleSelectAllProducts" />
                                    </th>
                                    <th class="text-nowrap">Product Code</th>
                                    <th class="text-nowrap">Product Name</th>
                                    <th class="text-nowrap">Price</th>
                                    
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var product in ProductService.PagedProducts.Items)
                                {
                                var productViewModel = ConvertToProductViewModel(product);
                                    <tr class="@((CustomerService.GetRecentlyUpdatedCustomerIds().Contains(product.ProdCode)) ? "recently-updated" : "")">
                                        <td>
                                        <input type="checkbox" checked="@(selectedProducts != null && selectedProducts.Any(c => c.ProdCode == product.ProdCode))" @onchange="@((args) => ToggleSelectedProducts(args, productViewModel))" />
                                        </td>
                                    <td>@product.ProdCode</td>
                                    <td>@product.Name</td>
                                    <td>@(FormatCurrency(product.Price))</td>

                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <nav aria-label="...">
                        <ul class="pagination mt-3">
                            <li class="page-item @(ProductService.PagedProducts.CurrentPage == 1 ? "disabled" : "")">
                                <a class="page-link" @onclick="(() => LoadProducts(CustomerService.PagedCustomers.CurrentPage - 1))">Previous</a>
                            </li>

                            @for (int i = 1; i <= ProductService.PagedProducts.TotalPages; i++)
                            {
                                int j = i;
                                <li class="page-item @(i == ProductService.PagedProducts.CurrentPage ? "active" : "")">
                                    <a class="page-link" @onclick="(() => LoadProducts(j))">@i</a>
                                </li>
                            }

                            <li class="page-item @(ProductService.PagedProducts.CurrentPage == ProductService.PagedProducts.TotalPages ? "disabled" : "")">
                                <a class="page-link" @onclick="(() => LoadCustomers(ProductService.PagedProducts.CurrentPage + 1))">Next</a>
                            </li>
                        </ul>
                    </nav>

                }
                <div class="modal-footer d-flex justify-content-end">
                    <button type="button" class="btn btn-secondary" @onclick="CloseProductModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SelectProduct">Select</button>
                </div>
                </div>
               
            </div>
        </div>
   



<div class="modal-backdrop fade show" style="@(isProductModalOpen ? "display: block; z-index: 1052;" : "display: none; opacity: 0.5;")"></div>

<!--End of Product Modal -->

<div class="container mt-4">
    <div class="row">
        <div class="col">
            <div class="shadow p-3 mb-5 bg-white rounded ">
                <div class="d-flex justify-content-between">
                    <button class="btn btn-primary mb-3 mt-4" @onclick="ShowOrderModal" disabled="@(Order.Customer == null || string.IsNullOrWhiteSpace(Order.CustomerCustCode))">
                        <i class="oi oi-plus text-white oi-3x"></i>
                    </button>

                    <div class="d-flex align-items-center">
             
                        <div class="mr-2">
                            <button type="button" class="btn btn-primary mx-2" @onclick="CreateOrder">Submit</button>
                        </div>

            
                        <div>
                            <button type="button" class="btn btn-secondary">Cancel</button>
                        </div>
                    </div>
                </div>

                <table class="table table-striped table-hover ">
                    <thead>
                        <tr>
                            <th>
                                <input type="checkbox" @bind="selectAllCheckedOrders" @onclick="ToggleSelectAllOrders" />
                            </th>
                            <th>Product Code</th>
                            <th>Description</th>
                            <th>Quantity</th>
                            <th>Price</th>
                            <th>Total</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var order in selectedOrders)
                        {
                            <tr>
                                <td>      <input type="checkbox" checked="@(!selectedOrders.Contains(order) ? false : orderSelection.ContainsKey(order) ? orderSelection[order] : false)" @onchange="() => ToggleSelectedOrder(order)" /></td>
                                <td>@order.ProductProdCode</td>
                                <td>@order.Product.Name</td>
                                <td>@order.Qty</td>
                                <td>@String.Format("{0:N2}", order.Product.Price)</td>
                                <td>@String.Format("{0:N2}", order.Qty * order.Product.Price)</td>
                                <td><button class="btn btn-success"><i class="oi oi-pencil text-white oi-3x"></i></button>
                                    <button class="btn btn-danger"><i class="oi oi-trash text-white oi-3x"></i></button>
                                </td>
                                
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="modal" tabindex="-1" role="dialog" aria-labelledby="customerModalLabel" style="@(isOrderModalOpen ? "display: block; z-index: 1051;" : "display: none;")">
    <div class="modal-dialog modal-xl modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-black" id="customerModalLabel">Select Product</h5>
                <button type="button" class="close" @onclick="CloseOrderModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
         
            <div class="modal-body">
                <div class="mb-3 d-flex">
                    <button class="btn btn-primary" @onclick="ShowProductModal"><i class="oi oi-eye text-white oi-3x"></i></button>

                    <div class="d-flex ms-auto col-md-3">
                        <div class="input-group position-relative ms-3 d-flex align-items-center">
 
                        </div>
                    </div>


                </div>

            </div>




            @if (Order != null && Order.Product != null)
            {
                <div class="container px-5">
                <EditForm Model="Order">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="prodcode" class="form-label">Product Code</label>
                                <InputText id="prodcode" @bind-Value="Order.ProductProdCode" class="form-control" readonly />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="productname" class="form-label">Product Name</label>
                                <input id="productname" Value="@Order.Product.Name" class="form-control" readonly />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="qty" class="form-label">Quantity</label>
                                <InputNumber id="qty" @bind-Value="Order.Qty" class="form-control" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="price" class="form-label">Price</label>
                                    <input id="price" Value="@String.Format("{0:N2}", Order.Product.Price)" class="form-control" readonly />
                            </div>
                        </div>
                      
                    </div>
                </EditForm>
                </div>
            }
            else
            {
                <p>Loading...</p>
            }

            <div class="modal-footer d-flex justify-content-end">
                <button type="button" class="btn btn-secondary" @onclick="CloseOrderModal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="SelectOrder">Select</button> 
            </div>
        </div>

    </div>
</div>

<div class="modal-backdrop fade show" style="@(isOrderModalOpen ? "display: block;" : "display: none; opacity: 0.5;")"></div>



@code {
    private bool isCustomerModalOpen = false;
    private bool isProductModalOpen = false;
    private bool isOrderModalOpen = false;
    private List<CustomerViewModel> selectedCustomers = new List<CustomerViewModel>();
    private List<OrderViewModel> selectedOrders = new List<OrderViewModel>();
    private List<ProductViewModel> selectedProducts = new List<ProductViewModel>();
    private bool selectAllCheckedCustomers;
    private bool selectAllCheckedProducts;
    private bool selectAllCheckedOrders;
    private string searchTerm = string.Empty;
    private Dictionary<OrderViewModel, bool> orderSelection = new Dictionary<OrderViewModel, bool>();



    public OrderViewModel Order = new ();


    protected override async Task OnInitializedAsync()
    {
        await CustomerService.GetCustomers();
        await ProductService.GetProducts();
        await LoadCustomers();
        await LoadProducts();

        Order = new OrderViewModel
            {
                Qty = 1,
                OrderDate = DateTime.Today
            };


        if (Order == null)
        {
            Order = new OrderViewModel();        }

        if (Order.Customer == null)
        {
            Order.Customer = new CustomerViewModel();
        }

        if (Order.Product == null)
        {
            Order.Product = new ProductViewModel();
        }



    }

    private CustomerViewModel ConvertToCustomerViewModel(OrderingSystem.Shared.Customer customer)
    {

        CustomerViewModel customerViewModel = new CustomerViewModel
            {
                CustCode = customer.CustCode,
                Fname = customer.Fname,
                Mname = customer.Mname,
                Lname = customer.Lname,
                FullName = $"{customer.Fname} {customer.Lname}",
                BillAddress = customer.BillAddress,
                ShipAddress = customer.ShipAddress,
                Email = customer.Email,
                MobileNum = customer.MobileNum,
                HomeNum = customer.HomeNum,
          
            };

        return customerViewModel;
    }


    private ProductViewModel ConvertToProductViewModel(OrderingSystem.Shared.Product product)
    {
     
        ProductViewModel productViewModel = new ProductViewModel
            {
                ProdCode = product.ProdCode,
                Name = product.Name,
                Price = product.Price,

            };

        return productViewModel;
    }


    private async Task LoadCustomers(int page = 1, int pageSize = 10)
    {
        await CustomerService.GetCustomers(page, pageSize, searchTerm);
    }

    private async Task LoadProducts(int page = 1, int pageSize = 10)
    {
        await ProductService.GetProducts(page, pageSize, searchTerm);
    }

    string FormatCurrency(decimal value)
    {
        return $"₱{value.ToString("N2")}";
    }


    private void ShowCustomerModal()
    {
        isCustomerModalOpen = true;
    }

    private void ShowProductModal()

    {
        selectedProducts.Clear();
        isProductModalOpen = true;
    }

    private void ShowOrderModal()
    {
        isOrderModalOpen = true;
    }

    private void CloseCustomerModal()
    {
        isCustomerModalOpen = false;
    }

    private void CloseOrderModal()
    {
        isOrderModalOpen = false;
    }

    private void CloseProductModal()
    {
        isProductModalOpen = false;
    }

    private async Task CreateOrder()
    {

        await OrderService.CreateOrder(Order);


    }


    private void ToggleSelectedOrder(OrderViewModel order)
    {
      
        if (selectedOrders.Contains(order))
        {
        
            orderSelection[order] = false;
        }
        else
        {
     
            orderSelection[order] = true;
        }

   

    }

    private async Task SelectOrder()
    {
        var existingOrder = selectedOrders.FirstOrDefault(o => o.ProductProdCode == Order.ProductProdCode);

        if (existingOrder != null)
        {
            existingOrder.Qty += Order.Qty;
        }
        else
        {
            selectedOrders.Add(Order);
        }
        Order = new OrderViewModel
            {
                Customer = Order.Customer,
                CustomerCustCode = Order.CustomerCustCode,
                Qty = Order.Qty,
                OrderDate = Order.OrderDate,
        
                Product = new ProductViewModel() 
            };

  
        CloseOrderModal();
    }

    private async Task SelectCustomer()
    {
        if (selectedCustomers.Any())
        {
        
            var selectedCustomer = selectedCustomers.First();

            Order.CustomerCustCode = selectedCustomer.CustCode;

            Order.Customer.FullName = $"{selectedCustomer.Fname} {selectedCustomer.Lname}";

            Order.Customer.BillAddress = selectedCustomer.BillAddress;

            Order.Customer.ShipAddress = selectedCustomer.ShipAddress;

            Order.Customer.MobileNum = selectedCustomer.MobileNum;

            Order.Customer.HomeNum = selectedCustomer.HomeNum;

        }

        CloseCustomerModal();
    }

    private async Task SelectProduct()
    {
        if (selectedProducts.Any())
        {
       
            var selectedProduct = selectedProducts.First();

         
            Order.ProductProdCode = selectedProduct.ProdCode;

            Order.Product.Name = selectedProduct.Name;

            Order.Product.Price = selectedProduct.Price;

        }

        CloseProductModal();
    }



    private async Task SearchCustomers()
    {
        await LoadCustomers();
    }

    private async Task SearchProducts()
    {
        await LoadProducts();
    }

    private void ToggleSelectedCustomers(ChangeEventArgs args, CustomerViewModel custCode)
    {
        if (args.Value is bool isChecked)
        {
            if (custCode.CustCode == "-1") 
            {
                selectedCustomers = isChecked
                    ? CustomerService.PagedCustomers.Items
                        .Select(item => new CustomerViewModel(
                            item.CustCode,
                            item.Fname,
                            item.Lname,
                            item.Mname,
                            item.BillAddress,
                            item.ShipAddress,
                            item.Email,
                            item.MobileNum,
                            item.HomeNum
                            ))
                        .ToList()
                    : new List<CustomerViewModel>();
            }
            else
            {
                if (isChecked && !selectedCustomers.Any(c => c.CustCode == custCode.CustCode))
                {
                    selectedCustomers.Add(custCode);
                }
                else if (!isChecked && selectedCustomers.Any(c => c.CustCode == custCode.CustCode))
                {
                    selectedCustomers.Remove(custCode);
                }
            }
        }
    }

    private void ToggleSelectedProducts(ChangeEventArgs args, ProductViewModel prodCode)
    {
        if (args.Value is bool isChecked)
        {
            if (prodCode.ProdCode == "-1")
            {
                selectedProducts = isChecked ? ProductService.PagedProducts.Items.Select(item => new ProductViewModel (
                    item.ProdCode,
                    item.Name,
                    item.Price
                ))
                .ToList() : new List<ProductViewModel>();
            }
            else
            {
                if (isChecked && !selectedProducts.Contains(prodCode))
                {
                    selectedProducts.Add(prodCode);
                }
                else if (!isChecked && selectedProducts.Contains(prodCode))
                {
                    selectedProducts.Remove(prodCode);
                }
            }
        }
    }

    private void ToggleSelectAllCustomers()
    {
        selectAllCheckedCustomers = !selectAllCheckedCustomers;

        if (selectAllCheckedCustomers)
        {
            selectedCustomers =
                      CustomerService.PagedCustomers.Items
                         .Select(item => new CustomerViewModel(
                             item.CustCode,
                             item.Fname,
                             item.Lname,
                             item.Mname,
                             item.BillAddress,
                             item.ShipAddress,
                             item.Email,
                             item.MobileNum,
                             item.HomeNum))
                         .ToList();

        }
        else
        {
            selectedCustomers.Clear();
        }
    }

    private void ToggleSelectAllOrders()
    {
 
        selectAllCheckedOrders = !selectAllCheckedOrders;

       
        foreach (var order in selectedOrders)
        {
           
            orderSelection[order] = selectAllCheckedOrders;
        }


    }

    private void ToggleSelectAllProducts()
    {
        selectAllCheckedProducts = !selectAllCheckedProducts;

        if (selectAllCheckedProducts)
        {
            selectedProducts = ProductService.PagedProducts.Items.Select(item => new ProductViewModel(
            item.ProdCode,
            item.Name,
            item.Price
            )).ToList();
        }
        else
        {
            selectedProducts.Clear();
        }
    }

}
